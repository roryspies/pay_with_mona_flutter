//! FUTURE OUTCOME IS A CUSTOM TYPE DEFINITION.
//! IT REPRESENTS A FUTURE THAT RETURNS A RECORD WHERE:
//! - THE FIRST ELEMENT IS THE SUCCESS VALUE (IF OPERATION SUCCEEDS).
//! - THE SECOND ELEMENT IS THE FAILURE OBJECT (IF OPERATION FAILS).
//! - ONLY ONE OF THEM WILL BE NON-NULL AT A TIME.
//!
//! FAILURE TYPE IS CUSTOM-DEFINED TO RETURN AN ERROR MESSAGE OR DETAILS.
//! SUCCESS TYPE IS FLEXIBLE AND DEPENDS ON THE USE CASE (e.g., INT, BOOL, MAP).

typedef FutureOutcome<SuccessType> = Future<(SuccessType?, Failure?)>;

//! FUTURE VOID REPRESENTS AN ASYNCHRONOUS OPERATION THAT DOES NOT RETURN MEANINGFUL DATA.
//! INSTEAD OF USING `void`, IT RETURNS A `bool` TO INDICATE SUCCESS.
//! - `true` MEANS THE OPERATION WAS SUCCESSFUL.
//! - `null` IS NEVER RETURNED IN SUCCESS CASES.
//! - ON FAILURE, A FAILURE OBJECT IS RETURNED INSTEAD.
typedef FutureVoid = FutureOutcome<bool>;

//! HELPER FUNCTIONS TO IMPROVE CODE READABILITY.
//! - `right(value)`: RETURNS A SUCCESSFUL RESULT WITH A NON-NULL VALUE.
//! - `left(failure)`: RETURNS A FAILURE RESULT WITH A NON-NULL FAILURE OBJECT.

// Success case
(SuccessType?, Failure?) right<SuccessType>(SuccessType value) => (value, null);

// Failure case
(SuccessType?, Failure?) left<SuccessType>(Failure failure) => (null, failure);

class Failure {
  String message;
  Failure(this.message);
}
